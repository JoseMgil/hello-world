import japgolly.scalajs.react._, vdom.html_<^._

val TodoList = ScalaFnComponent[List[String]]{ props =>
    def createItem(itemText: String) = <.li(itemText)
    <.ul(props map createItem: _*)
  }

case class State(items: List[String], text: String, jornada: String, total_h: String)

class Backend(scope: BackendScope[Unit, State]) {
  
  def onChange(e: ReactEventFromInput) = {
    val newValue = e.target.value
    e.target.id match 
    {
      case "Imp" => scope.modState(_.copy(text = newValue))
      case "Jor" => scope.modState(_.copy(jornada = newValue))
      case "Tot" => scope.modState(_.copy(total_h = newValue))
    }
  }

  def handleSubmit(e: ReactEventFromInput) = 
    e.preventDefaultCB >>
    scope.modState(s => State(imputar(s.text, s.jornada, s.total_h), "", "", ""))
    

  def render(state: State) =
    <.div(
      <.h3("RESUMEN IMPUTACIONES"),
      TodoList(state.items),
      <.form(^.onSubmit ==> handleSubmit,
        "Imputacion: ", <.textarea(^.id := "Imp", ^.onChange ==> onChange, ^.value := state.text), <.br(), 
        "Jornada: ", <.input(^.id := "Jor", ^.onChange ==> onChange, ^.value := state.jornada), <.br(), 
        "Total Horas a Imputar: ", <.input(^.id := "Tot", ^.onChange ==> onChange, ^.value := state.total_h), <.br(), 
        <.br(),<.button("Imputacion")
      )
    )
    
  def obtainList(s_text: String):  List[String] = {
    val lis = s_text.split("\n")
    val node1 = lis(0).split("\t[^\t]*\t")
    var ret = List[String]()
    for(e <- lis) ret = ret:+ (e.split("\t[^\t]*\t")(0) + " " + e.split("\t[^\t]*\t")(1))
    ret
  }
  
  def imputar(imputacion: String, v_jornada: String, v_total: String): List[String] = {
    var lista = obtainList(imputacion)
    var lista_imp = List[Imputacion]()
    for(item <- lista) lista_imp = lista_imp:+ new Imputacion(item.split(" ")(0), item.split(" ")(1).toInt)
    new RealizaImputacion("Jose", v_total.toInt, lista_imp, v_jornada.toInt).obtenerImputaciones()    
  }
  
}

val TodoApp = ScalaComponent.builder[Unit]("TodoApp")
  .initialState(State(Nil, "", "", ""))
  .renderBackend[Backend]
  .build


TodoApp().renderIntoDOM(Fiddle.panel)
